---
fullname: CoqEAL
shortname: coqeal
organization: coq-community
community: true
action: true
coqdoc: false
dune: false

synopsis: >-
  CoqEAL - The Coq Effective Algebra Library

description: |-
  This Coq library is based on Mathematical Components and has two parts:
  - theory, which contains developments in algebra, including normal forms of matrices
    and optimized algorithms for matrix operations and on structures such as polynomials.
  - refinements, which is a framework to ease change of data representations during a proof
    with the help of parametricity.

publications:
- pub_url: https://hal.inria.fr/hal-00734505/document
  pub_title: A refinement-based approach to computational algebra in Coq
  pub_doi: 10.1007/978-3-642-32347-8_7
- pub_url: https://hal.inria.fr/hal-01113453/document
  pub_title: Refinements for free!
  pub_doi: 10.1007/978-3-319-03545-1_10
- pub_url: https://hal.inria.fr/hal-01378905/document
  pub_title: A Coq Formalization of Finitely Presented Modules
  pub_doi: 10.1007/978-3-319-08970-6_13
- pub_url: https://hal.inria.fr/hal-01081908/document
  pub_title: Formalized Linear Algebra over Elementary Divisor Rings in Coq
  pub_doi: 10.2168/LMCS-12(2:7)2016
- pub_url: https://hal.inria.fr/hal-01414881/document
  pub_title: A refinement-based approach to large scale reflection for algebra
- pub_url: https://tel.archives-ouvertes.fr/tel-00986283/
  pub_title: Interaction entre algèbre linéaire et analyse en formalisation des mathématiques
- pub_url: https://jfr.unibo.it/article/view/2615
  pub_doi: 10.6092/issn.1972-5787/2615
  pub_title: A formal proof of Sasaki-Murao algorithm
- pub_url: http://hdl.handle.net/2077/37325
  pub_title: Formalizing Refinements and Constructive Algebra in Type Theory
- pub_title: Coherent and Strongly Discrete Rings in Type Theory
  pub_url: https://staff.math.su.se/anders.mortberg/papers/coherent.pdf
  pub_doi: 10.1007/978-3-642-35308-6_21

authors:
- name: Guillaume Cano
  initial: true
- name: Cyril Cohen
  initial: true
- name: Maxime Dénès
  initial: true
- name: Érik Martin-Dorel
  initial: false
- name: Anders Mörtberg
  initial: true
- name: Damien Rouhling
  initial: false
- name: Pierre Roux
  initial: false
- name: Vincent Siles
  initial: true
- name: Laurent Théry
  initial: false

maintainers:
- name: Cyril Cohen
  nickname: CohenCyril
- name: Pierre Roux
  nickname: proux01

opam-file-maintainer: Cyril Cohen <cyril.cohen@inria.fr>

opam-file-version: dev

license:
  fullname: MIT License
  identifier: MIT

supported_coq_versions:
  text: 8.13 or later (use releases for other Coq versions)
  opam: '{(>= "8.13" & < "8.18~") | (= "dev")}'

dependencies:
- opam:
    name: coq-bignums
  description: |-
    [Bignums](https://github.com/coq/bignums) same version as Coq
- opam:
    name: coq-paramcoq
    version: '{>= "1.1.3"}'
  description: |-
    [Paramcoq](https://github.com/coq-community/paramcoq) 1.1.3 or later
- opam:
    name: coq-mathcomp-multinomials
    version: '{((>= "1.5.1" & < "1.7~") | = "dev")}'
  description: |-
    [MathComp Multinomials](https://github.com/math-comp/multinomials) >= 1.5.1 and < 1.7
- opam:
    name: coq-mathcomp-algebra
    version: '{((>= "1.13.0" & < "1.16~") | = "dev")}'
  description: |-
    [MathComp algebra](https://math-comp.github.io) 1.13.0 or later
- opam:
    name: coq-mathcomp-real-closed
    version: '{(>= "1.1.2" & < "1.2~") | (= "dev")}'
  description: |-
    [MathComp real-closed](https://math-comp.github.io) 1.1.2 or later

tested_coq_opam_versions:
- version: '1.15.0-coq-8.16'
  repo: 'mathcomp/mathcomp'
- version: '1.15.0-coq-8.15'
  repo: 'mathcomp/mathcomp'
- version: '1.15.0-coq-8.14'
  repo: 'mathcomp/mathcomp'
- version: '1.15.0-coq-8.13'
  repo: 'mathcomp/mathcomp'
- version: '1.14.0-coq-8.15'
  repo: 'mathcomp/mathcomp'
- version: '1.14.0-coq-8.14'
  repo: 'mathcomp/mathcomp'
- version: '1.14.0-coq-8.13'
  repo: 'mathcomp/mathcomp'
- version: '1.13.0-coq-8.15'
  repo: 'mathcomp/mathcomp'
- version: '1.13.0-coq-8.14'
  repo: 'mathcomp/mathcomp'
- version: '1.13.0-coq-8.13'
  repo: 'mathcomp/mathcomp'
- version: 'coq-dev'
  repo: 'mathcomp/mathcomp-dev'
- version: 'coq-8.16'
  repo: 'mathcomp/mathcomp-dev'

namespace: CoqEAL

keywords:
- name: effective algebra
- name: elementary divisor rings
- name: Smith normal form
- name: mathematical components
- name: Bareiss
- name: Karatsuba multiplication
- name: refinements
- name: Buchberger's algorithm
- name: Gröbner basis
- name: polynomials

categories:
- name: Computer Science/Decision Procedures and Certified Algorithms/Correctness proofs of algorithms

documentation: |-
  ## Background

  The library hosts a subset of the work that was developed in the context of
  the ForMath EU FP7 project (2009-2013). More information about
  the project and its deliverables is available on its
  [website](http://wiki.portal.chalmers.se/cse/pmwiki.php/ForMath).

  ## Theory

  The `theory` directory has the following content:

  - `ssrcomplements`, `minor` `mxstructure`, `polydvd`, `similar`,
    `binetcauchy`, `ssralg_ring_tac`: Various extensions of the
    Mathematical Components (MathComp) library.

  - `dvdring`, `coherent`, `stronglydiscrete`, `edr`: Hierarchy of
    structures with divisibility (from rings with divisibility, PIDs,
    elementary divisor rings, etc.).

  - `fpmod`: Formalization of finitely presented modules.

  - `kaplansky`: For providing elementary divisor rings from the
    Kaplansky condition.

  - `closed_poly`: Polynomials with coefficients in a closed field.

  - `companion`, `frobenius_form`, `jordan`, `perm_eq_image`,
    `smith_complements`: Results on normal forms of matrices.

  - `bareiss_dvdring`, `bareiss`, `gauss`, `karatsuba`, `rank`,
    `strassen`, `toomcook`, `smithpid`, `smith`: Various efficient
    algorithms for computing operations on polynomials or matrices.

  - `grobner`: Formalization of Gröbner bases associated with polynomial
     ideals, and Buchberger's algorithm for computing such bases.

  ## Refinements

  The `refinements` directory has the following content:

  - `refinements`: Classes for refinements and refines together with
    operational typeclasses for common operations.

  - `binnat`: Proof that the binary naturals of Coq (`N`) are a refinement
    of the MathComp unary naturals (`nat`) together with basic operations.

  - `binord`: Proof that the binary natural numbers of Coq (`N`) are a refinement
    of the MathComp ordinals.

  - `binint`: MathComp integers (`ssrint`) are refined to a new type
    parameterized by positive numbers (represented by a sigma type) and
    natural numbers.  This means that proofs can be done using only
    lemmas from the MathComp library which leads to simpler proofs than
    previous versions of `binint` (e.g., `N`).

  - `binrat`: Arbitrary precision rational numbers (`bigQ`) from the
    [Bignums](https://github.com/coq-community/bignums) library are refined to
    MathComp's rationals (`rat`).

  - `rational`: The rational numbers of MathComp (`rat`) are refined to
    pairs of elements refining integers using parametricity of
    refinements.

  - `seqmatrix` and `seqmx_complements`: Refinement of MathComp
    matrices (`M[R]_(m,n)`) to lists of lists (`seq (seq R)`).

  - `seqpoly`: Refinement of MathComp polynomials (`{poly R}`) to lists (`seq R`).

  - `multipoly`: Refinement of
    [MathComp multinomials](https://github.com/math-comp/multinomials)
    and multivariate polynomials to the Coq Stdlib's
    [finite maps](https://github.com/coq/coq/blob/master/theories/FSets/FMapAVL.v).

  Files should use the following conventions (w.r.t. `Local` and `Global` instances):
  ```coq
  (** Part 1: Generic operations *)
  Section generic_operations.

  Global Instance generic_operation := ...

  (** Part 2: Correctness proof for proof-oriented types and programs *)
  Section theory.

  Local Instance param_correctness : param ...

  (** Part 3: Parametricity *)
  Section parametricity.

  Global Instance param_parametricity : param ...
  Proof. exact: param_trans. Qed.

  End parametricity.
  End theory.
  ```
---
